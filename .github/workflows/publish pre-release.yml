name: Publish Pre-release Extension

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches:
      - main
    paths:
      - '**.tmLanguage.json'
      - '**.tmLanguage.simple.json'
      - '**.tmLanguage.full.json'
      - '**.language-configuration.json'
      - '**.ts'

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      vsix_filename: ${{ steps.get_version.outputs.vsix_filename }}
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Dependencies
        run: |
          npm i
          npm install -g typescript "@vscode/vsce" "ovsx"

      - name: Build Extension
        run: |
          npm run compile

      - name: Run Tests
        run: |
          npm run test

      - name: Setup Git
        run: |
          git config --global user.name "Oleksandr K."
          git config --global user.email "${{ secrets.AUTHOR_EMAIL }}"

      - name: Commit Build Changes
        run: |
          git add .
          git diff-index --quiet HEAD || git commit -m "Build changes for pre-release"

      - name: Check Current Version and Publish to Marketplace
        id: publish_step
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Use the version increment type from input, default to patch
          VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
          echo "Version increment type: $VERSION_TYPE"
          
          # Try to publish, capture output and handle version conflicts
          if npx vsce publish $VERSION_TYPE --pre-release --no-yarn 2>&1 | tee publish_output.log; then
            echo "publish_success=true" >> $GITHUB_OUTPUT
            echo "✅ Successfully published to marketplace"
          else
            # Check if the error is due to version already existing
            if grep -q "already exists" publish_output.log; then
              echo "publish_success=false" >> $GITHUB_OUTPUT
              echo "version_exists=true" >> $GITHUB_OUTPUT
              echo "⚠️ Version already exists in marketplace"
              
              # Provide helpful guidance
              echo ""
              echo "📋 TO PUBLISH A NEW VERSION, run one of these commands locally:"
              echo ""
              echo "For PATCH version (1.0.3 → 1.0.4):"
              echo "  npm version patch && git push --follow-tags"
              echo ""
              echo "For MINOR version (1.0.3 → 1.1.0):"
              echo "  npm version minor && git push --follow-tags"
              echo ""
              echo "For MAJOR version (1.0.3 → 2.0.0):"
              echo "  npm version major && git push --follow-tags"
              echo ""
              echo "Then re-run this workflow to publish the new version."
              echo ""
            else
              echo "publish_success=false" >> $GITHUB_OUTPUT
              echo "version_exists=false" >> $GITHUB_OUTPUT
              echo "❌ Publishing failed for other reasons"
              exit 1
            fi
          fi
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

      - name: Get Updated Version and Build VSIX
        id: get_updated_version
        run: |
          # Get the version (updated if published, or current if skipped)
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          if [[ "${{ steps.publish_step.outputs.publish_success }}" == "true" ]]; then
            echo "📦 Building VSIX with newly published version: $NEW_VERSION"
          else
            echo "📦 Building VSIX with current version: $NEW_VERSION (publishing was skipped)"
          fi
          
          # Build VSIX
          vsce package --pre-release --no-yarn
          
          # Get the VSIX filename
          VSIX_FILE=$(ls *.vsix | head -1)
          echo "vsix_filename=$VSIX_FILE" >> $GITHUB_OUTPUT
          echo "Built VSIX file: $VSIX_FILE"

      - name: Create Git Tag and Push
        run: |
          NEW_VERSION="${{ steps.get_updated_version.outputs.new_version }}"
          
          if [[ "${{ steps.publish_step.outputs.publish_success }}" == "true" ]]; then
            echo "🏷️ Processing Git operations for newly published version $NEW_VERSION"
            # Commit any remaining changes (like updated package.json)
            git add .
            git diff-index --quiet HEAD || git commit -m "Version bump to $NEW_VERSION for pre-release"
          else
            echo "🏷️ Processing Git operations for existing version $NEW_VERSION (publishing was skipped)"
            # Still commit any build changes
            git add .
            git diff-index --quiet HEAD || git commit -m "Build artifacts for version $NEW_VERSION"
          fi
          
          # Create tag only if it doesn't exist
          if ! git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
            echo "Creating new tag v$NEW_VERSION"
            git tag "v$NEW_VERSION"
            TAG_CREATED=true
          else
            echo "Tag v$NEW_VERSION already exists, skipping tag creation"
            TAG_CREATED=false
          fi
          
          # Push changes and tags
          git push origin main
          if [[ "$TAG_CREATED" == "true" ]]; then
            git push origin "v$NEW_VERSION"
          else
            echo "Skipping tag push since tag already exists"
          fi

      - name: Create GitHub Pre-release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          draft: false
          title: "Gosu Language Support v${{ steps.get_updated_version.outputs.new_version }} - Pre-release"
          automatic_release_tag: "v${{ steps.get_updated_version.outputs.new_version }}"
          files: ${{ steps.get_updated_version.outputs.vsix_filename }}
